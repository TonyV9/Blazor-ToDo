@page "/"

@rendermode InteractiveServer

@using System.ComponentModel.DataAnnotations

<h2 class="text-center">To Do Tasks</h2>

<div class="mb-3">
    <label for="newTask" class="form-label">New Task</label>
    <input id="newTask" class="form-control" placeholder="Enter task description" @bind="newTaskDescription" />
</div>
<button class="btn btn-primary" @onclick="AddTask">Add Task</button>

@if (tasks.Any())
{
    <table class="table mt-3">
        <thead>
            <tr>
                <th>Task</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var task in tasks)
            {
                <tr>
                    <td>
                        @if (editTaskId == task.Id)
                        {
                            <input class="form-control" @bind="editTaskDescription" />
                        }
                        else
                        {
                            @task.Description
                        }
                    </td>
                    <td>
                        @if (task.IsCompleted)
                        {
                            <span class="badge bg-success">Completed</span>
                        }
                        else
                        {
                            <span class="badge bg-warning">Pending</span>
                        }
                    </td>
                    <td>
                        @if (editTaskId == task.Id)
                        {
                            <button class="btn btn-success btn-sm" @onclick="() => SaveTask(task.Id)">Save</button>
                            <button class="btn btn-secondary btn-sm" @onclick="CancelEdit">Cancel</button>
                        }
                        else
                        {
                            <button class="btn btn-info btn-sm" @onclick="() => EditTask(task.Id)">Edit</button>
                            <button class="btn btn-danger btn-sm" @onclick="() => RemoveTask(task.Id)">Delete</button>
                            <button class="btn btn-warning btn-sm" @onclick="() => ToggleTaskStatus(task.Id)">
                                @if (task.IsCompleted)
                                {
                                    <text>Mark Pending</text>
                                }
                                else
                                {
                                    <text>Mark Completed</text>
                                }
                            </button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p class="mt-3">No tasks added yet.</p>
}

@code {
    private string newTaskDescription = string.Empty;
    private List<TaskItem> tasks = new List<TaskItem>();
    private int editTaskId = -1;
    private string editTaskDescription = string.Empty;
    private int nextTaskId = 1;

    public class TaskItem
    {
        public int Id { get; set; }
        public string Description { get; set; } = string.Empty;
        public bool IsCompleted { get; set; }
    }

    private void AddTask()
    {
        if (!string.IsNullOrWhiteSpace(newTaskDescription))
        {
            tasks.Add(new TaskItem
                {
                    Id = nextTaskId++,
                    Description = newTaskDescription,
                    IsCompleted = false
                });
            newTaskDescription = string.Empty;
            StateHasChanged();
        }
    }

    private void EditTask(int id)
    {
        var task = tasks.FirstOrDefault(t => t.Id == id);
        if (task != null)
        {
            editTaskId = id;
            editTaskDescription = task.Description;
        }
    }

    private void SaveTask(int id)
    {
        var task = tasks.FirstOrDefault(t => t.Id == id);
        if (task != null && !string.IsNullOrWhiteSpace(editTaskDescription))
        {
            task.Description = editTaskDescription;
            editTaskId = -1;
            editTaskDescription = string.Empty;
        }
    }

    private void CancelEdit()
    {
        editTaskId = -1;
        editTaskDescription = string.Empty;
    }

    private void RemoveTask(int id)
    {
        var task = tasks.FirstOrDefault(t => t.Id == id);
        if (task != null)
        {
            tasks.Remove(task);
        }
    }

    private void ToggleTaskStatus(int id)
    {
        var task = tasks.FirstOrDefault(t => t.Id == id);
        if (task != null)
        {
            task.IsCompleted = !task.IsCompleted;
        }
    }
}
